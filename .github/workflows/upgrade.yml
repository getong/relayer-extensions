on:
  push:
    branches:
      - 'staging'
      - 'dev'
      - 'testnet'
      - 'mainnet'

name: Upgrade Price Reporter

jobs:
  build-and-push-ecr:
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    outputs:
      image: ${{ steps.login-ecr.outputs.registry }}/price-reporter-${{ github.ref_name }}:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ca-central-1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: docker-build-push
        uses: docker/build-push-action@v5
        env:
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/price-reporter-${{ github.ref_name }}
        with:
          platforms: linux/arm64
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ github.sha }},${{ env.IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-ecs:
    runs-on: ubuntu-latest
    needs: build-and-push-ecr
    env:
        PRICE_REPORTER_NAME: ${{ github.ref_name }}-price-reporter
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ca-central-1"

      - name: Get the existing task definitions
        id: fetch-task-def
        run: |
          aws ecs describe-task-definition --task-definition "${{ env.PRICE_REPORTER_NAME }}-task-def" --query 'taskDefinition' > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: price-reporter-container
          image: ${{ needs.build-and-push-ecr.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: ecs-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: ${{ env.PRICE_REPORTER_NAME }}-service
          cluster: ${{ env.PRICE_REPORTER_NAME }}-cluster
          wait-for-service-stability: true

      - name: Check for rollback
        id: check-rollback
        run: |
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ env.PRICE_REPORTER_NAME }}-cluster --services ${{ env.PRICE_REPORTER_NAME }}-service --query services[0].deployments[0].taskDefinition | jq -r ".")
          NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
          if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
            echo "Deployment rolled back."
            exit 1
          fi
